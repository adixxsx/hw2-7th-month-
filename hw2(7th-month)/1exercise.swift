//
//  main.swift
//  hw2(7th-month)
//
//  Created by user on 3/5/24.
//

import Foundation

//1. Анализ Кода:
    //Определите, нарушает ли этот код какие-либо принципы SOLID и объясните почему.

class Vehicle {
   func go() { print("Moving") }
   func stop() { print("Stopped") }
}

class Car: Vehicle {
   func turnOnRadio() { print("Radio on") }
}

//Ну первое что нарушает принцип SOLID это SRP(Single Responsibility Principle -- Принцип единственной ответственности) а точнее класс Car выполняет несколько различных функций управления транспортным средством ( go, stop) а также управляет радио (turnOnRadio) что является ошибкой, это приводит к смешиванию функциональности. Было бы лучше отделить функию с радио от базовых функций ехать и остановиться.

//А второе тут нарушается OCP(Open/Closed Principle -- Принцип открытости/закрытости). Класс Car не является закрытым для изменений, т.к при добавлении новых типов транспортных средств необходимо будет изменять сам класс Car, что нарушает принцип открытости, закрытости. Вместо того чтобы делать Car наследником Vehicle, можно создать класс Car, который будет содержать экземпляр Vehicle; то есть мы создаем отдельно протокол Vehicle и будем использовать его как ТОП чего-то то есть делегировать ему базy.
